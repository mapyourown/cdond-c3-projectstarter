version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Add parameter here   
    steps:
      - run:
          name: Destroy backend environments ${CIRCLE_WORKFLOW_ID:0:7}
          command: |
            echo "Deleting the stack"
            echo << parameters.workflowID >> 
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >> 
          when: on_fail
      - run:
          name: Destroy frontend environments ${CIRCLE_WORKFLOW_ID:0:7}
          command: |
            echo "Deleting the front end"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >> 
          when: on_fail
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
      # Add parameter here     
    steps:
      - run:
          # Add when this will run
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/486vPYSoxHfrrU6Z6AKf6e/migration_<< parameters.Workflow_ID >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              exit 1
            fi  

orbs: 
  slack: circleci/slack@4.9.4
  #aws-cli: circleci/aws-cli@2.0.3
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: backend-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build] 
      # Your job code here
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@sbekele1'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@sbekele1'
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build] 
      # Your job code here
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
      - slack/notify:
          event: fail
          mentions: '@sbekele1'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@sbekele1'
          template: success_tagged_deploy_1
  
  deploy-infrastructure:
    docker:
          # Docker image here that supports AWS CLI
          #testing
      - image: amazon/aws-cli
    steps:
          # Checkout code from git
        - checkout
        - run:
            name: Install dependacy
            command: |
              yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              # Your code here
              cd .circleci/ansible
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
              cat inventory.txt

        - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
          # Here's where you will add some code to rollback on failure  
  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:9b:23:49:05:42:38:b3:da:d1:e6:5e:e6:e6:fe:5d"
         
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
         cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible 
      - run:
          name: Configure node_exporter
          command: |
            # Your code here
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt 
            ansible-playbook -i inventory.txt monitor-promethues.yml
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt 
            ansible-playbook -i inventory.txt configure-server.yml

  configure-prometheus:
    docker: 
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:9b:23:49:05:42:38:b3:da:d1:e6:5e:e6:e6:fe:5d"
         
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
         cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Configure node_exporter
          command: |
            # Your code here
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt 
            ansible-playbook -i inventory.txt monitor-promethues.yml
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |  
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
            # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
            curl --insecure https://kvdb.io/486vPYSoxHfrrU6Z6AKf6e/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
             curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
             yum -y install nodejs 
             yum install -y tar gzip
            # apt-get update && apt-get install -y awscli
            
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure   

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "23:9b:23:49:05:42:38:b3:da:d1:e6:5e:e6:e6:fe:5d"

      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            # your code here
            touch .env
            echo ENVIROMENT=production > .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -lart
            cat .env
            mv .env backend
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Content of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment: 
              workflowID : "${CIRCLE_WORKFLOW_ID:0:7}"
      - store_artifacts:
          path: artifact.tar.gz
          destination: .circleci/ansible/
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image:  cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then    
              exit 0
            else
              exit 1
            fi
  
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome" 
            then
            # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment: 
              workflowID : "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure    
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Fetch old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # fetch all stacks names   
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo Stack names: "${STACKS[@]}"    
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            echo "=============delete confirmed======================="
            aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
            echo "=============cannot cleanup======================="
            fi  

workflows:
  default:
    jobs:
     - build-frontend
     - build-backend
     - test-frontend:
        requires: [build-frontend]
     - test-backend:
        requires: [build-backend]
     - scan-backend:
        requires: [build-backend]
        context: Notification
     - scan-frontend:
        requires: [build-frontend]
        context: Notification
     - configure-prometheus
     - deploy-infrastructure:
        requires: [test-frontend, test-backend] #scan-frontend, scan-backend]
        filters:
          branches:
            only: [master]
     - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
     - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
     - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
     - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
     - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
     - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
     #- cleanup:
          #requires: [cloudfront-update]
      

            

          

          



              